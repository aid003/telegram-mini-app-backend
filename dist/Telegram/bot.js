"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bot = void 0;
exports.startTelegramBot = startTelegramBot;
const caption_1 = require("./caption");
const client_1 = require("@prisma/client");
const node_telegram_bot_api_1 = __importDefault(require("node-telegram-bot-api"));
const log4js_1 = __importDefault(require("log4js"));
const path_1 = __importDefault(require("path"));
if (!process.env.API_KEY_BOT) {
    throw new Error("‚ùå API_KEY_BOT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
}
const config = {
    token: process.env.API_KEY_BOT,
    miniAppUrl: `${process.env.MINI_APP_URL}`,
    welcomeImagePath: path_1.default.resolve("./public/main.jpg"),
};
exports.bot = new node_telegram_bot_api_1.default(config.token, {
    polling: {
        interval: 1000,
        autoStart: true,
        params: {
            timeout: 30,
        },
    },
});
const prisma = new client_1.PrismaClient();
const logger = log4js_1.default.getLogger();
logger.level = "info";
async function startTelegramBot() {
    exports.bot.on("polling_error", (err) => {
        logger.error("Polling error:", err);
        setTimeout(() => startTelegramBot(), 5000);
    });
    exports.bot.on("message", async (msg) => {
        const chatId = msg.chat.id;
        const tgId = msg.from?.id;
        const text = msg.text?.trim() || "";
        if (!tgId) {
            logger.warn("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –±–µ–∑ tgId");
            return exports.bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.");
        }
        if (text === "/start") {
            const userName = msg.from?.username;
            const firstName = msg.from?.first_name;
            if (!userName || !firstName) {
                logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ChatId: ${chatId}`);
                return exports.bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            }
            try {
                let user = await prisma.user.findUnique({ where: { tgId } });
                if (!user) {
                    user = await prisma.user.create({
                        data: { tgId, userName, firstName },
                    });
                    logger.info(`üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userName} (tgId: ${tgId})`);
                }
                else {
                    logger.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${userName} (tgId: ${tgId})`);
                }
                await prisma.userStatistics.upsert({
                    where: { userId: user.id },
                    update: { botLaunch: true },
                    create: { userId: user.id, botLaunch: true },
                });
                await exports.bot.sendPhoto(chatId, config.welcomeImagePath, {
                    caption: caption_1.caption,
                    parse_mode: "Markdown",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
                                    web_app: { url: config.miniAppUrl },
                                },
                            ],
                        ],
                    },
                });
                logger.info(`üì© –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userName}`);
            }
            catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start —É ${tgId}:`, error);
                await exports.bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
        if (text === "/statistic") {
            const allowedTgIds = [2099914999, 7311013323];
            if (!allowedTgIds.includes(Number(tgId))) {
                logger.warn(`‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${tgId} –ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É`);
                return exports.bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
            }
            try {
                const [botLaunchCount, miniAppLinkClickedCount, learnMoreButtonClickedCount, courseButtonClickedCount, coursePaidCount,] = await Promise.all([
                    prisma.userStatistics.count({ where: { botLaunch: true } }),
                    prisma.userStatistics.count({ where: { miniAppLinkClicked: true } }),
                    prisma.userStatistics.count({
                        where: { learnMoreButtonClicked: true },
                    }),
                    prisma.userStatistics.count({ where: { courseButtonClicked: true } }),
                    prisma.userStatistics.count({ where: { coursePaid: true } }),
                ]);
                const totalUsers = botLaunchCount || 1; // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
                const miniAppConversion = ((miniAppLinkClickedCount / totalUsers) *
                    100).toFixed(2);
                const learnMoreConversion = ((learnMoreButtonClickedCount / miniAppLinkClickedCount) *
                    100).toFixed(2);
                const courseButtonConversion = ((courseButtonClickedCount / learnMoreButtonClickedCount) *
                    100).toFixed(2);
                const coursePaidConversion = ((coursePaidCount / courseButtonClickedCount) *
                    100).toFixed(2);
                const learnMoreGlobalConversion = ((learnMoreButtonClickedCount / totalUsers) *
                    100).toFixed(2);
                const courseButtonGlobalConversion = ((courseButtonClickedCount / totalUsers) *
                    100).toFixed(2);
                const coursePaidGlobalConversion = ((coursePaidCount / totalUsers) *
                    100).toFixed(2);
                const statisticsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂* üìä\n\n` +
                    `üöÄ *–ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞:* ${botLaunchCount}\n` +
                    `üîó *–ü–µ—Ä–µ—à–ª–∏ –≤ Mini App:* ${miniAppLinkClickedCount} (${miniAppConversion}%)\n` +
                    `‚ùì *–ù–∞–∂–∞–ª–∏ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ":* ${learnMoreButtonClickedCount} (${learnMoreConversion}% | ${learnMoreGlobalConversion}%)\n` +
                    `üí≥ *–ù–∞–∂–∞–ª–∏ "–ö—É–ø–∏—Ç—å –∫—É—Ä—Å":* ${courseButtonClickedCount} (${courseButtonConversion}% | ${courseButtonGlobalConversion}%)\n` +
                    `‚úÖ *–û–ø–ª–∞—Ç–∏–ª–∏ –∫—É—Ä—Å:* ${coursePaidCount} (${coursePaidConversion}% | ${coursePaidGlobalConversion}%)`;
                await exports.bot.sendMessage(chatId, statisticsMessage, {
                    parse_mode: "Markdown",
                });
                logger.info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å tgId: ${tgId}`);
            }
            catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /statistic —É ${tgId}:`, error);
                await exports.bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    });
    exports.bot.on("callback_query", async (query) => {
        const chatId = query.message?.chat.id;
        const data = query.data;
        if (!chatId || !data)
            return;
        logger.info(`üîò –ü–æ–ª—É—á–µ–Ω callback_query: ${data}`);
        if (data === "some_action") {
            await exports.bot.sendMessage(chatId, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É!");
        }
        await exports.bot.answerCallbackQuery(query.id);
    });
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.");
}
//# sourceMappingURL=bot.js.map