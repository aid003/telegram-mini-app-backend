import { caption } from "./caption";
import { PrismaClient } from "@prisma/client";
import TelegramBot from "node-telegram-bot-api";
import log4js from "log4js";
import path from "path";

type BotConfig = {
  token: string;
  miniAppUrl: string;
  welcomeImagePath: string;
};

if (!process.env.API_KEY_BOT) {
  throw new Error("‚ùå API_KEY_BOT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
}

const config: BotConfig = {
  token: process.env.API_KEY_BOT as string,
  miniAppUrl: `${process.env.MINI_APP_URL}`,
  welcomeImagePath: path.resolve("./public/main.jpg"),
};

export const bot = new TelegramBot(config.token, {
  polling: { interval: 200 },
});

const prisma = new PrismaClient();
const logger = log4js.getLogger();
logger.level = "info";

export async function startTelegramBot() {
  bot.on("polling_error", (err) => {
    logger.error("Polling error:", err);
    setTimeout(() => startTelegramBot(), 5000); 
  });

  bot.on("message", async (msg) => {
    if (msg.text !== "/start") return;

    const chatId = msg.chat.id;
    const tgId = msg.from?.id;
    const userName = msg.from?.username;
    const firstName = msg.from?.first_name;

    if (!tgId || !userName || !firstName) {
      logger.warn(`Missing user data for chatId: ${chatId}`);
      return bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    try {
      let user = await prisma.user.findUnique({ where: { tgId } });

      if (!user) {
        user = await prisma.user.create({
          data: { tgId, userName, firstName },
        });
        logger.info(
          `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userName} (tgId: ${tgId})`
        );
      } else {
        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${userName} (tgId: ${tgId})`);
      }

      await prisma.userStatistics.upsert({
        where: { userId: user.id },
        update: { botLaunch: true },
        create: { userId: user.id, botLaunch: true },
      });

      await bot.sendPhoto(chatId, config.welcomeImagePath, {
        caption,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üî• –û—Ç–∫—Ä—ã—Ç—å Mini App",
                web_app: { url: config.miniAppUrl },
              },
            ],
          ],
        },
      });

      logger.info(
        `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userName}`
      );
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start —É ${tgId}:`, error);
      await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  });
}
