import { caption } from "./caption";
import { PrismaClient } from "@prisma/client";
import TelegramBot from "node-telegram-bot-api";
import log4js from "log4js";
import path from "path";

type BotConfig = {
  token: string;
  miniAppUrl: string;
  welcomeImagePath: string;
};

const config: BotConfig = {
  token: process.env.API_KEY_BOT as string,
  miniAppUrl: "https://127.0.0.1:3000",
  welcomeImagePath: path.resolve("./public/main.jpg"),
};

export const bot = new TelegramBot(config.token, {
  polling: { interval: 200 },
});
const prisma = new PrismaClient();
const logger = log4js.getLogger();
logger.level = "info";

export async function startTelegramBot() {
  bot.on("polling_error", (err) => logger.error("Polling error:", err));

  bot.on("message", async (msg) => {
    if (msg.text !== "/start") return;

    const chatId = msg.chat.id;
    const tgId = msg.from?.id;
    const userName = msg.from?.username;
    const firstName = msg.from?.first_name;

    if (!tgId || !userName || !firstName) {
      logger.warn(`Missing user data for chatId: ${chatId}`);
      return bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    try {
      let user = await prisma.user.findUnique({ where: { tgId } });

      if (!user) {
        user = await prisma.user.create({
          data: { tgId, userName, firstName },
        });
        logger.info(
          `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userName} (tgId: ${tgId})`
        );
      } else {
        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${userName} (tgId: ${tgId})`);
      }

      await prisma.userStatistics.upsert({
        where: { userId: user.id },
        update: { botLaunch: true },
        create: { userId: user.id, botLaunch: true },
      });

      await bot.sendPhoto(chatId, config.welcomeImagePath, {
        caption,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üî• –û—Ç–∫—Ä—ã—Ç—å Mini App",
                web_app: { url: config.miniAppUrl },
              },
            ],
          ],
        },
      });

      logger.info(
        `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userName}`
      );
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start —É ${tgId}:`, error);
      await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  });

  bot.on("message", async (msg) => {
    if (msg.text !== "/statistic") return;

    const chatId = msg.chat.id;
    const tgId = msg.from?.id;

    const allowedTgIds = [2099914999, 7311013323];
    if (!allowedTgIds.includes(Number(tgId))) {
      return bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }

    try {
      const botLaunchCount = await prisma.userStatistics.count({
        where: {
          botLaunch: true,
        },
      });

      const miniAppLinkClickedCount = await prisma.userStatistics.count({
        where: {
          miniAppLinkClicked: true,
        },
      });

      const learnMoreButtonClickedCount = await prisma.userStatistics.count({
        where: {
          learnMoreButtonClicked: true,
        },
      });

      const courseButtonClickedCount = await prisma.userStatistics.count({
        where: {
          courseButtonClicked: true,
        },
      });

      const coursePaidCount = await prisma.userStatistics.count({
        where: {
          coursePaid: true,
        },
      });

      const statisticsMessage =
        `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞*\n\n` +
        `–ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞: ${botLaunchCount}\n` +
        `–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –±–æ—Ç–∞ –≤ MA: ${miniAppLinkClickedCount}\n` +
        `–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ": ${learnMoreButtonClickedCount}\n` +
        `–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –∫—É—Ä—Å": ${courseButtonClickedCount}\n` +
        `–û–ø–ª–∞—Ç–∏–ª–∏ –∫—É—Ä—Å: ${coursePaidCount}`;

      await bot.sendMessage(chatId, statisticsMessage, {
        parse_mode: "Markdown",
      });

      logger.info(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å tgId: ${tgId}`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /statistic —É ${tgId}:`, error);
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
    }
  });
}
